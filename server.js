// socket.broadcast.emit("message", {}); // send to everyone except the current peer
// io.emit("message", {}); // send to all the connected peers
// io.to(sendersId).emit("message", {}); // send to a specific user by socket.id
const express = require("express");
const app = express();

const http = require("http");
const { nextTick } = require("process");
const server = http.createServer(app);

const socketio = require("socket.io");

const io = socketio(server, {
  cors: {
    origins: "*:*",
    credentials: true,
    optionSuccessStatus: 200,
  },
});

var usersN = 0;
var usersIDs = [];

var PORT = 5000;

io.on("connection", (socket) => {
  console.log(`
  #####################################################
  #    New user(${usersN}) connected: ${socket.id}    #
  #####################################################
  usersN=${usersN}\n`);

  usersN++;
  if (usersN > 1) {
    usersIDs.forEach(id => {
      setTimeout(() => {
        io.to(id).emit("joined", { to: id, from: socket.id });
      }, 1000);
    });
    // socket.broadcast.emit("joined", { id: socket.id });
  }
  usersIDs.push(socket.id);

  socket.on("disconnect", () => {
    console.log(`- user disconnected: ${socket.id}`);
    // socket.broadcast.emit("peerDisconnected", {});
    usersN--;
  });

  socket.on("offer", (data) => {
    console.log(`* offer generated by: ${socket.id}; for: ${data.id}`);
    // console.log("offer:", data.text);
    //socket.broadcast.emit("offer", { text: data.text });
    io.to(data.id).emit("offer", { text: data.text, to: data.id, from: socket.id });
  });

  socket.on("candidate", (data) => {
    console.log(`* ice candidates generated by: ${socket.id}; for: ${data.id}`);
    // socket.broadcast.emit("candidate", { text: data.text });
    // setTimeout(() => {
      io.to(data.id).emit("candidate", { text: data.text, to: data.id, from: socket.id });
    // }, 1000);
    // io.to(data.id).emit("candidate", { text: data.text, to: data.id, from: socket.id });
  });

  socket.on("answer", (data) => {
    console.log(`* answer generated by: ${socket.id}; for: ${data.to}`);
    // socket.broadcast.emit("answer", { text: data.text });
    io.to(data.to).emit("answer", { text: data.text, to: data.id, from: socket.id });
  });
});

server.listen(PORT, () => console.log(`server is listening to port: ${PORT}`));